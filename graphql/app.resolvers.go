package graphql

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"errors"
	"strconv"
	"time"

	"encore.app/app"
	"encore.app/graphql/generated"
	"encore.app/graphql/model"
	"gorm.io/gorm"
)

// CreatedAt is the resolver for the createdAt field.
func (r *blogResolver) CreatedAt(ctx context.Context, obj *app.Blog) (string, error) {
	return obj.CreatedAt.Format(time.RFC3339), nil
}

// ID is the resolver for the id field.
func (r *blogResolver) ID(ctx context.Context, obj *app.Blog) (string, error) {
	return strconv.FormatUint(uint64(obj.ID), 10), nil
}

// CreateBlog is the resolver for the createBlog field.
func (r *mutationResolver) CreateBlog(ctx context.Context, input model.CreateBlogInput) (*app.Blog, error) {
	blog := &app.Blog{
		Title:     input.Title,
		Content:   input.Content,
		CreatedAt: time.Now(),
	}
	if err := r.db.Create(blog).Error; err != nil {
		return nil, err
	}
	return blog, nil
}

// CreateProject is the resolver for the createProject field.
func (r *mutationResolver) CreateProject(ctx context.Context, input model.CreateProjectInput) (*app.Project, error) {
	userID, err := strconv.ParseUint(input.UserID, 10, 64)
	if err != nil {
		return nil, err
	}
	project := &app.Project{
		Title:       input.Title,
		Description: input.Description,
		UserID:      uint(userID),
	}
	if err := r.db.Create(project).Error; err != nil {
		return nil, err
	}
	return project, nil
}

// CreateResume is the resolver for the createResume field.
func (r *mutationResolver) CreateResume(ctx context.Context, input model.CreateResumeInput) (*app.Resume, error) {
	resume := &app.Resume{
		Title:       input.Title,
		Description: input.Description,
		Category:    input.Category,
	}
	if err := r.db.Create(resume).Error; err != nil {
		return nil, err
	}
	return resume, nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (*app.User, error) {
	user := &app.User{
		Name:      input.Name,
		Email:     input.Email,
		CreatedAt: time.Now(),
	}
	if err := r.db.Create(user).Error; err != nil {
		return nil, err
	}
	return user, nil
}

// DeleteBlog is the resolver for the deleteBlog field.
func (r *mutationResolver) DeleteBlog(ctx context.Context, id string) (bool, error) {
	blogID, err := strconv.ParseUint(id, 10, 64)
	if err != nil {
		return false, err
	}
	if err := r.db.Delete(&app.Blog{}, blogID).Error; err != nil {
		return false, err
	}
	return true, nil
}

// DeleteProject is the resolver for the deleteProject field.
func (r *mutationResolver) DeleteProject(ctx context.Context, id string) (bool, error) {
	projectID, err := strconv.ParseUint(id, 10, 64)
	if err != nil {
		return false, err
	}
	if err := r.db.Delete(&app.Project{}, projectID).Error; err != nil {
		return false, err
	}
	return true, nil
}

// DeleteResume is the resolver for the deleteResume field.
func (r *mutationResolver) DeleteResume(ctx context.Context, id string) (bool, error) {
	resumeID, err := strconv.ParseUint(id, 10, 64)
	if err != nil {
		return false, err
	}
	if err := r.db.Delete(&app.Resume{}, resumeID).Error; err != nil {
		return false, err
	}
	return true, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (bool, error) {
	userID, err := strconv.ParseUint(id, 10, 64)
	if err != nil {
		return false, err
	}
	if err := r.db.Delete(&app.User{}, userID).Error; err != nil {
		return false, err
	}
	return true, nil
}

// UpdateBlog is the resolver for the updateBlog field.
func (r *mutationResolver) UpdateBlog(ctx context.Context, id string, input model.UpdateBlogInput) (*app.Blog, error) {
	blogID, err := strconv.ParseUint(id, 10, 64)
	if err != nil {
		return nil, err
	}
	var blog app.Blog
	if err := r.db.First(&blog, blogID).Error; err != nil {
		return nil, err
	}
	if input.Title != nil {
		blog.Title = *input.Title
	}
	if input.Content != nil {
		blog.Content = *input.Content
	}
	if err := r.db.Save(&blog).Error; err != nil {
		return nil, err
	}
	return &blog, nil
}

// UpdateProject is the resolver for the updateProject field.
func (r *mutationResolver) UpdateProject(ctx context.Context, id string, input model.UpdateProjectInput) (*app.Project, error) {
	projectID, err := strconv.ParseUint(id, 10, 64)
	if err != nil {
		return nil, err
	}
	var project app.Project
	if err := r.db.First(&project, projectID).Error; err != nil {
		return nil, err
	}
	if input.Title != nil {
		project.Title = *input.Title
	}
	if input.Description != nil {
		project.Description = *input.Description
	}
	if input.UserID != nil {
		userID, err := strconv.ParseUint(*input.UserID, 10, 64)
		if err != nil {
			return nil, err
		}
		project.UserID = uint(userID)
	}
	if err := r.db.Save(&project).Error; err != nil {
		return nil, err
	}
	return &project, nil
}

// UpdateResume is the resolver for the updateResume field.
func (r *mutationResolver) UpdateResume(ctx context.Context, id string, input model.UpdateResumeInput) (*app.Resume, error) {
	resumeID, err := strconv.ParseUint(id, 10, 64)
	if err != nil {
		return nil, err
	}
	var resume app.Resume
	if err := r.db.First(&resume, resumeID).Error; err != nil {
		return nil, err
	}
	if input.Title != nil {
		resume.Title = *input.Title
	}
	if input.Description != nil {
		resume.Description = *input.Description
	}
	if input.Category != nil {
		resume.Category = *input.Category
	}
	if err := r.db.Save(&resume).Error; err != nil {
		return nil, err
	}
	return &resume, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, input model.UpdateUserInput) (*app.User, error) {
	userID, err := strconv.ParseUint(id, 10, 64)
	if err != nil {
		return nil, err
	}
	var user app.User
	if err := r.db.First(&user, userID).Error; err != nil {
		return nil, err
	}
	if input.Name != nil {
		user.Name = *input.Name
	}
	if input.Email != nil {
		user.Email = *input.Email
	}
	if err := r.db.Save(&user).Error; err != nil {
		return nil, err
	}
	return &user, nil
}

// ID is the resolver for the id field.
func (r *projectResolver) ID(ctx context.Context, obj *app.Project) (string, error) {
	return strconv.FormatUint(uint64(obj.ID), 10), nil
}

// User is the resolver for the user field.
func (r *projectResolver) User(ctx context.Context, obj *app.Project) (*app.User, error) {
	var user app.User
	if err := r.db.First(&user, obj.UserID).Error; err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			return nil, nil
		}
		return nil, err
	}
	return &user, nil
}

// UserID is the resolver for the userID field.
func (r *projectResolver) UserID(ctx context.Context, obj *app.Project) (string, error) {
	return strconv.FormatUint(uint64(obj.UserID), 10), nil
}

// Blog is the resolver for the blog field.
func (r *queryResolver) Blog(ctx context.Context, id string) (*app.Blog, error) {
	blogID, err := strconv.ParseUint(id, 10, 64)
	if err != nil {
		return nil, err
	}
	var blog app.Blog
	if err := r.db.First(&blog, blogID).Error; err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			return nil, nil
		}
		return nil, err
	}
	return &blog, nil
}

// Blogs is the resolver for the blogs field.
func (r *queryResolver) Blogs(ctx context.Context) ([]*app.Blog, error) {
	var blogs []*app.Blog
	if err := r.db.Find(&blogs).Error; err != nil {
		return nil, err
	}
	return blogs, nil
}

// Project is the resolver for the project field.
func (r *queryResolver) Project(ctx context.Context, id string) (*app.Project, error) {
	projectID, err := strconv.ParseUint(id, 10, 64)
	if err != nil {
		return nil, err
	}
	var project app.Project
	if err := r.db.First(&project, projectID).Error; err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			return nil, nil
		}
		return nil, err
	}
	return &project, nil
}

// Projects is the resolver for the projects field.
func (r *queryResolver) Projects(ctx context.Context) ([]*app.Project, error) {
	var projects []*app.Project
	if err := r.db.Find(&projects).Error; err != nil {
		return nil, err
	}
	return projects, nil
}

// Resume is the resolver for the resume field.
func (r *queryResolver) Resume(ctx context.Context, id string) (*app.Resume, error) {
	resumeID, err := strconv.ParseUint(id, 10, 64)
	if err != nil {
		return nil, err
	}
	var resume app.Resume
	if err := r.db.First(&resume, resumeID).Error; err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			return nil, nil
		}
		return nil, err
	}
	return &resume, nil
}

// Resumes is the resolver for the resumes field.
func (r *queryResolver) Resumes(ctx context.Context) ([]*app.Resume, error) {
	var resumes []*app.Resume
	if err := r.db.Find(&resumes).Error; err != nil {
		return nil, err
	}
	return resumes, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*app.User, error) {
	userID, err := strconv.ParseUint(id, 10, 64)
	if err != nil {
		return nil, err
	}
	var user app.User
	if err := r.db.First(&user, userID).Error; err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			return nil, nil
		}
		return nil, err
	}
	return &user, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*app.User, error) {
	var users []*app.User
	if err := r.db.Find(&users).Error; err != nil {
		return nil, err
	}
	return users, nil
}

// ID is the resolver for the id field.
func (r *resumeResolver) ID(ctx context.Context, obj *app.Resume) (string, error) {
	return strconv.FormatUint(uint64(obj.ID), 10), nil
}

// CreatedAt is the resolver for the createdAt field.
func (r *userResolver) CreatedAt(ctx context.Context, obj *app.User) (string, error) {
	return obj.CreatedAt.Format(time.RFC3339), nil
}

// ID is the resolver for the id field.
func (r *userResolver) ID(ctx context.Context, obj *app.User) (string, error) {
	return strconv.FormatUint(uint64(obj.ID), 10), nil
}

// Projects is the resolver for the projects field.
func (r *userResolver) Projects(ctx context.Context, obj *app.User) ([]*app.Project, error) {
	var projects []*app.Project
	if err := r.db.Where("user_id = ?", obj.ID).Find(&projects).Error; err != nil {
		return nil, err
	}
	return projects, nil
}

// Blog returns generated.BlogResolver implementation.
func (r *Resolver) Blog() generated.BlogResolver { return &blogResolver{r} }

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Project returns generated.ProjectResolver implementation.
func (r *Resolver) Project() generated.ProjectResolver { return &projectResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// Resume returns generated.ResumeResolver implementation.
func (r *Resolver) Resume() generated.ResumeResolver { return &resumeResolver{r} }

// User returns generated.UserResolver implementation.
func (r *Resolver) User() generated.UserResolver { return &userResolver{r} }

type blogResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type projectResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type resumeResolver struct{ *Resolver }
type userResolver struct{ *Resolver }